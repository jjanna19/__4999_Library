%==========================================================================
%                       The RSPLINE CONSTRAINED Algorithm
%==========================================================================
% DATE
%        Apr 2016
%
% AUTHOR
%        Anna Dong, Nellie Wu
% REFERENCE		
%==========================================================================
%
% INPUT
%        x0
%              Matrix (size = 'NumStartingSol' X 'dim') of 'NumStartingSol'
%              initial solutions to the solver
%              For ARSPLINECons, NumStartingSol = 1
%              Each initial solution is of size dim X 1
%        problem
%              Problem function name
%        problemseed
%              Substream index (integer >=1)
%        solverseed
%              Input seed for ARSPLINECons (integer between 1 and 2147483646)
%        budget
%              Vector of size NumSoln, where NumSoln is
%              the number of solutions returned by the solver
%              for example, if budget = [500 1000] then NumSoln
%              is 2 and the solver returns best available solutions after
%              every 500 calls to the oracle
%        logfilename
%
%
% OUTPUT
%        Ancalls
%              An array (size = 'NumSoln' X 1) of budget expended
%        A
%              An array (size = 'NumSoln' X 'dim') of solutions
%              returned by solver
%        Afn
%              An array (size = 'NumSoln' X 1) of estimates of expected
%              objective function value
%        AFnVar
%              An array of variances corresponding to
%              the objective function at A
%              Equals NaN if solution is infeasible
%        AFnGrad
%              An array of gradient estimates at A; not reported
%        AFnGardCov
%              An array of gradient covariance matrices at A; not reported
%        Aconstraint
%              A vector of constraint function estimators; not applicable
%        AConstraintCov
%              An array of covariance matrices corresponding to the
%              constraint function at A; not applicable
%        AConstraintGrad
%              An array of constraint gradient estimators at A; not
%              applicable
%        AConstraintGradCov
%              An array of covariance matrices of constraint gradient
%              estimators at A; not applicable
%
%==========================================================================

%% ARSPLINECons
function [Ancalls, A, Afn, AFnVar, AFnGrad, AFnGradCov, ...
    Aconstraint, AConstraintCov, AConstraintGrad, ...
    AConstraintGradCov] = ARSPLINECons(x0, problem, problemseed, ...
    solverseed, budget, logfilename, minmax)

%% Unreported
AFnGrad = NaN;
AFnGradCov = NaN;
Aconstraint = NaN;
AConstraintCov = NaN;
AConstraintGrad = NaN;
AConstraintGradCov = NaN;

%% Solver parameters
kmax=1000;  % maximum number of retrospective iterations
mk=size(x0, 2);	% initial sample size (for k=1)
bk=mk+2;      % maximum number of SPLINE calls in the first retrospective 

global r;
r = 30;
% Initialize
k=0;
XkStar=x0;
NumFinSoln = length(budget); % number of solutions returned by solver
dim = size(x0, 2); % solution dimension

Ancalls = zeros(NumFinSoln, 1);
ncalls = 0; 
A = zeros(NumFinSoln, dim);
Afn = zeros(NumFinSoln, 1);
AFnVar = zeros(NumFinSoln, 1);

logfname = strcat(logfilename,'.txt');
logfid = fopen(logfname, 'w');

s1 = RandStream.create('mrg32k3a', 'NumStreams', 1,'seed',solverseed);
RandStream.setGlobalStream(s1);
probhandle=str2func(problem);
problemstructhandle=str2func(strcat(problem, 'Structure'));
[minmax, ~, ~, ~, VarBds, ~, ~, xc, ~, ~, ~] = problemstructhandle(1, problemseed);
% check initSoln
if dim ~= size(xc,2) || (sum(x0'<VarBds(:,1))+sum(x0'>VarBds(:,2)))>0
    error('initial solution is wrong');
end
% Alg 1
for k1=1:NumFinSoln
    budg = budget(k1);
    mk2=mk;
    bk2=bk;
    while ncalls<=budg && k<=kmax %need modif, kmax?
        Ancalls(k1)=ncalls;
        [splinencalls, x1, gmk_x1] = SPLINE(XkStar,mk,bk,probhandle,problemseed,minmax,VarBds);
        
        gmk_x0 = -minmax*probhandle(x0,r,problemseed); % minimization prob
        ncalls = r;
        if gmk_x1>gmk_x0
            x1 = x0;
            gmk_x1 = gmk_x0;
        end
        ncalls = ncalls + splinencalls; %splinencalls is the number of oracle 
                                    %calls for each call of SPLINE
        k = k+1;     
        mk2=ceil(mk2*c1);
        bk2=ceil(bk2*c2);
        XkStar = x1;
    end
    k=0;
    XkStar = x0;
end


%% SPLINE
    function [splinencalls, x1, gmk_x1] = SPLINE(XkStar,mk,bk,probhandle,problemseed,minmax,VarBds)
        %margin=0.00005; %if diff by a very small margin, take the old value
        n=0; %init number of oracle calls
        Xnew=XkStar;
        while ~(gmk_Xnew == gmk_Xold || n>bk)   %if there is a unique best X or tied..
            [SPLIncalls,Xold,gmk_Xold] = SPLI(Xnew,mk,bk,probhandle,problemseed,minmax,VarBds); %check input on VarBds
            [NEncalls,Xnew,gmk_Xnew] = NE(Xold,mk,probhandle,problemseed,minmax,VarBds);
            n=n+SPLIncalls+NEncalls;
        end
        splinencalls = n;
        if gmk_Xnew<gmk_Xold
            x1=Xnew;
            gmk_x1=gmk_Xnew;
        else
            x1=Xold;
            gmk_Xnew=gmk_Xold;
        end
    end


%% SPLI
    function [SPLIncalls,Xold,gmk_Xold] = SPLI(Xnew,mk,bk,problemseed,minmax,VarBds)
        s0=2; %init step
        c=2; %multiplier
        Xbest = Xnew;
        gmk_Xnew = -minmax*probhandle(Xnew,r,problemseed);
        gmk_Xbest = gmk_Xnew;
        SPLIncalls=r;
        d=length(Xnew);
        
        while SPLIncalls < bk
            %continue with new gradient estimate
            x11=PERTURB(Xbest); %x1 for Alg 4
            [gmk_x11, grad_gmk_x11] = PLI(x11,mk,problemseed,minmax,VarBds); 
            if isnan(norm(grad_gmk_x11)) || norm(grad_gmk_x11)=0
                Xold=Xbest;
                gmk_Xold=gmk_Xbest;
                return
            elseif gmk_x11<gmk_Xbest
                Xbest = x11;
                gmk_Xbest = gmk_x11;
            end
            SPLIncalls=SPLIncalls+(d+1)*mk;
            if SPLIncalls >bk
                Xold=Xbest;
                gmk_Xold=gmk_Xbest;
                return
            end
            i=0;
            x01=Xbest;
            while ~(x11~=Xbest || SPLIncalls>bk)
                i=i+1;
                s=c^(i-1)*s0;
                x11=x01-s*grad_gmk_x11/norm(grad_gmk_x11);
                x11=round(x11); %shift to the nearest integer soln
                if x11<VarBds(:,1) || x11>VarBds(:,2)
                    Xold=Xbest;
                    gmk_Xold=gmk_Xbest;
                    return
                end
                gmk_x11 = -minmax*probhandle(x11,r,problemseed); % minimization prob   
                if gmk_x11 < gmk_Xbest
                    gmk_Xbest = gmk_x11;
                    Xbest = x11;
                end
            end
            if i<=2
                Xold=Xbest;
                gmk_Xold=gmk_Xbest;
                return
            end
        end

        
    end

%% PLI
    function [gmk_xv, grad_gmk_xv] = PLI(xv,mk,problemseed,minmax,VarBds)
        dim2 = length(xv);
        x0v = floor(xv);
        zv = xv-x0v;
        [zv,pd]=sort(zv);
        zv = [1, zv, 0];
        pd = [0, pd, dim2+1]; %0 to d+1, length = d+2
        
        xM = zeros(dim2,dim2); %x_i
        xM(1,:) = x0v;
        for i2=2:dim2+1
            pi = pd(i2);
            epi = zeros(1,dim2);
            epi(pi)=1;
            xM(i2,:)=xM(i2-1,:)+epi;
        end
        for i3=
        
        
    end






%% PLI
function [fbar, gamma, npoints, plixbest, plixbestfn, plixbestFnVar, ...
    plixbestconstraint, plixbestConstraintCov] = PLI(problem, x, ...
    mk, iseed, logfid, minmax,VarBds)

id = length(x); npoints=0;
strange=3.145962987654;
gamma=zeros(id,1);
x0=floor(x);
%z=zeros(id,1);
z=x-x0;
z=[1;z;0];

[~, p]=sort(z, 'descend');
w=zeros(id+1,1);
for i=1:id+1
    w(i,1)=z(p(i))-z(p(i+1));
end
wsum=0;
fbar=0;

%PRINT TO LOGFILE
% fprintf(logfid, '\t\t\t\t\tp z w\n');
for i=1:id+1
    % fprintf(logfid, '\t\t\t\t\t%d %0.15f %0.15f\n', p(i), z(i), w(i));
end
% fprintf(logfid, '\n\t\t\t\t\ti=1, mk=%d\n', mk);
% fprintf(logfid, '\t\t\t\t\tx0 = [');
for i=1:id
    % fprintf(logfid, '%d ', x0(i));
end
% fprintf(logfid, ']\n');
%END PRINT
[x0fn, x0FnVar, ~, ~, x0constraint, x0ConstraintCov, ~, ~]=...
    oracle(str2func(problem), x0, mk, iseed, minmax);
if ~isnan(x0fn)
    npoints=npoints+1;
    wsum = wsum + w(1);
    fbar = fbar + w(1)*x0fn;
    ghatold = x0fn;
    plixbest=x0;
    plixbestfn = x0fn;
    plixbestFnVar=x0FnVar;
    plixbestconstraint=x0constraint;
    plixbestConstraintCov=x0ConstraintCov;
    
    % fprintf(logfid, '\t\t\t\t\tx0.ghat = %.12f, w = %.12f, ghatold = %.12f, gbar = %.6f\n\n', x0fn, w(1), ghatold, fbar);
else
    ghatold = 0;
    plixbestfn = strange;
end

for i=2:id+1
    x0(i-1)=x0(i-1)+1; %x0(p(i)-1)=x0(p(i)-1)+1;
    % PRINT TO LOGFILE
    % fprintf(logfid, '\n\t\t\t\t\ti = %d', i);
    % fprintf(logfid, ', mk = %d\n', mk);
    % fprintf(logfid, '\t\t\t\t\tx0 = [');
    for j=1:id
        % fprintf(logfid, '%d ', x0(j));
    end
    % fprintf(logfid, ']\n');
    % END PRINT
    
    %call oracle at the other id points that form the simplex
%     if x0(i-1)>VarBds(i-1,2) || x0(i-1)<VarBds(i-1,1)
%         x0fn = nan;
%     else
        [x0fn, x0FnVar, ~, ~, x0constraint, x0ConstraintCov, ~, ~]=...
            oracle(str2func(problem), x0, mk, iseed, minmax);
%     end
    if ~isnan(x0fn)
        npoints=npoints+1;
        wsum = wsum + w(i);
        fbar = fbar + w(i)*x0fn;
        gamma(p(i)-1) = x0fn - ghatold;
        ghatold = x0fn;
        
        %PRINT TO LOGFILE
        % fprintf(logfid, '\t\t\t\t\tx0.ghat = %.12f, w = %.12f, ghatold = %.12f\n', x0fn, w(i), ghatold);
        % fprintf(logfid, '\t\t\t\t\tgbar=%0.6f, npoints=%d\n', fbar, npoints);
        %END PRINT
        
        if plixbestfn == strange || x0fn + 0.00005 < plixbestfn
            plixbest=x0;
            plixbestfn = x0fn;
            plixbestFnVar=x0FnVar;
            plixbestconstraint=x0constraint;
            plixbestConstraintCov=x0ConstraintCov;
        end
        
        %PRINT TO LOGFILE
        % fprintf(logfid, '\t\t\t\t\txbest.ghat = %.12f\n\t\t\t\t\txbest = [', plixbestfn);
        for j=1:id
            % fprintf(logfid, '%d ', plixbest(j));
        end
        % fprintf(logfid, ']\n');
        %END PRINT
    end
end

if wsum > 0.00005
    fbar = fbar/wsum;
end

%PRINT TO LOGFILE
% fprintf(logfid, '\n\t\t\t\t\tgbar = %.12f, npoints = %d\n', fbar, npoints);
%END PRINT

end


%%


% Set default values.
r = 30; % Runlength time for each solution
alpha = 1; % for Nelder-Mead
gammap = 2;
betap = 0.5;
delta = 0.5; % new modification, = 0.9;
%
NumFinSoln = length(budget); % number of solutions returned by solver
dim = size(x0, 2); % solution dimension
numExtPts = dim + 1; % choonse n+1 extreme points
s1 = RandStream.create('mrg32k3a', 'NumStreams', 1,'seed',solverseed);
RandStream.setGlobalStream(s1);
problemstructhandle=str2func(strcat(problem, 'Structure'));
[minmax, ~, ~, ~, VarBds, ~, ~, xc, ~, ~, ~] = problemstructhandle(1, problemseed);
% check initSoln
if dim ~= size(xc,2)
    error('initial solution is wrong');
end
if min(budget) < r*numExtPts
    fprintf('A budget is too small for a good quality run of Nelder-Mead.');
    return
end
% calculate a scale factor ***
sf = ones(dim,2);
numL = floor(numExtPts/2);
numH = numExtPts-floor(numExtPts/2)-1;
for k12=1:dim
    if x0(k12)==VarBds(dim,1)
        numL = 0;
        numH = numExtPts-1;
    elseif x0(k12)==VarBds(dim,2)
       	numL = numExtPts;
        numH = 0;
    end
end
for k1=1:dim
    if VarBds(dim,1) > -Inf
        sf(dim,1) = -(x0(dim)-VarBds(dim,1))/numL;
    else
        sf(dim,1) = -10; %arbitrary
    end
    if VarBds(dim,2) < Inf
        sf(dim,2) = (VarBds(dim,2)-x0(dim)-10)/numH;
    else
        sf(dim,2) = 10;
    end
end
ssolsL = [x0; zeros(numL,dim)]; 
ssolsH = [x0; zeros(numH,dim)];
for k2 = 2:numL+1
    ssolsL(k2,:) = ssolsL(k2-1,:) + sf(dim,1)';
end
for k3 = 2:numH+1
    ssolsH(k3,:) = ssolsH(k3-1,:) + sf(dim,2)';
end
ssolsM = [ssolsL; ssolsH(2:end,:)]; % starting solution matrix
% used in the checkCons helper function: tstep = 0.05;

%%
iters = floor(budget/(r*numExtPts)); % stopping criterion: max # of function evals, given the problem and budget
Ancalls = (iters*r*numExtPts)';

% Initialize
A = zeros(NumFinSoln, dim);
Afn = zeros(NumFinSoln, 1);
AFnVar = zeros(NumFinSoln, 1);

logfname = strcat(logfilename,'.txt');
logfid = fopen(logfname, 'w');

probHandle = str2func(problem);

% start iterations
for nF = 1: NumFinSoln
	% Iterations
    RandStream.setGlobalStream(s1);
    problemseed2 = problemseed;
    iterCount = 1;
    
    while iterCount < iters(nF)
        fprintf(logfid, '======== ITERATION #%d ========\n', iterCount);
        [ssolsM, Plow, Flow] = iteration(ssolsM, numExtPts, r, probHandle, problemseed2, minmax, alpha, gammap, betap, delta, VarBds);
        fprintf(logfid, 'Current lowest vertex at x = %.4f,\n', Plow);
        fprintf(logfid,'Current lowest objective function value = %.4f,\n', Flow);
        iterCount = iterCount + 1;
        %problemseed2 = problemseed2 + unidrnd(100);
    end
    % Last Iteration
    [ssolsM, l2hfnVf, ~, ~, ~, l2hfnVarV] = iterReflectWorst(ssolsM, numExtPts, r, probHandle, problemseed2, minmax, alpha,VarBds);
    A(nF,:) = ssolsM(1,:);
    Afn(nF) = -minmax*l2hfnVf(1);
    AFnVar(nF) = l2hfnVarV(1);
end

fprintf(logfid,'\nCompleted iterations.\n');



end

